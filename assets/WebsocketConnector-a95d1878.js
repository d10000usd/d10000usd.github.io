var u=Object.defineProperty;var l=(n,e,t)=>e in n?u(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var r=(n,e,t)=>(l(n,typeof e!="symbol"?e+"":e,t),t);import{r as o}from"./index-d2dc968f.js";const S=["KRW-BTC","KRW-ETH","KRW-NEO","KRW-MTL","KRW-XRP","KRW-ETC","KRW-SNT","KRW-WAVES","KRW-XEM","KRW-QTUM","KRW-LSK","KRW-STEEM","KRW-XLM","KRW-ARDR","KRW-ARK","KRW-STORJ","KRW-GRS","KRW-ADA","KRW-SBD","KRW-POWR","KRW-BTG","KRW-ICX","KRW-EOS","KRW-TRX","KRW-SC","KRW-ONT","KRW-ZIL","KRW-POLYX","KRW-ZRX","KRW-LOOM","KRW-BCH","KRW-BAT","KRW-IOST","KRW-CVC","KRW-IQ","KRW-IOTA","KRW-HIFI","KRW-ONG","KRW-GAS","KRW-UPP","KRW-ELF","KRW-KNC","KRW-BSV","KRW-THETA","KRW-QKC","KRW-MOC","KRW-TFUEL","KRW-MANA","KRW-ANKR","KRW-AERGO","KRW-ATOM","KRW-TT","KRW-CRE","KRW-MBL","KRW-WAXP","KRW-HBAR","KRW-MED","KRW-MLK","KRW-STPT","KRW-ORBS","KRW-VET","KRW-CHZ","KRW-STMX","KRW-DKA","KRW-HIVE","KRW-KAVA","KRW-AHT","KRW-LINK","KRW-XTZ","KRW-BORA","KRW-JST","KRW-CRO","KRW-TON","KRW-SXP","KRW-HUNT","KRW-PLA","KRW-DOT","KRW-MVL","KRW-STRAX","KRW-AQT","KRW-GLM","KRW-SSX","KRW-META","KRW-FCT2","KRW-CBK","KRW-SAND","KRW-HPO","KRW-DOGE","KRW-STRK","KRW-PUNDIX","KRW-FLOW","KRW-AXS","KRW-STX","KRW-XEC","KRW-SOL","KRW-MATIC","KRW-AAVE","KRW-1INCH","KRW-ALGO","KRW-NEAR","KRW-AVAX","KRW-T","KRW-CELO","KRW-GMT","KRW-APT","KRW-SHIB","KRW-MASK","KRW-ARB","KRW-EGLD","KRW-SUI","KRW-GRT","KRW-BLUR","KRW-IMX","KRW-SEI","KRW-MINA"];class d{constructor(e){r(this,"ws",null);r(this,"updateFunctions",[]);r(this,"dataDictionary",{});r(this,"coinsData",{});r(this,"tickersRaw",S);r(this,"dataSettings",e=>{const t=e.code;if(this.tickersRaw.includes(t)){const s=e.highest_52_week_price,a=e.lowest_52_week_price,i=e.trade_price,W=(i-s)/s*100,h=(i-a)/a*100;return e.H52=W,e.L52=h,this.coinsData[t]=e,new Map(Object.entries(this.coinsData))}return null});e&&this.updateFunctions.push(e)}registerUpdateFunction(e){this.updateFunctions.push(e)}async handleWebSocketMessageIn(e){try{const t=await e.data.text(),s=JSON.parse(t);s&&typeof s=="object"?this.updateFunctions.forEach(a=>a(this.dataSettings(s))):console.error("Invalid data structure:",s)}catch(t){console.error("Error parsing WebSocket message:",t)}}async setupWebSocket(e){try{this.ws?console.warn("WebSocket already initialized. Ignoring setup request."):(this.ws=new WebSocket("wss://api.upbit.com/websocket/v1"),this.ws.onopen=()=>{setTimeout(async()=>{this.ws&&this.ws.readyState===WebSocket.OPEN?this.ws.send(JSON.stringify([{ticket:"test"},{type:"ticker",codes:this.tickersRaw}])):console.error(`WebSocket not in OPEN state. Unable to send data. ${e}`)},1)},this.ws.onclose=t=>{setTimeout(()=>{this.setupWebSocket(e),console.log(`Reconnect: ${e}`,t)},1111),this.ws=null},this.ws.onmessage=t=>{this.ws&&this.ws.readyState===WebSocket.OPEN?this.handleWebSocketMessageIn(t):console.error(`WebSocket not in OPEN state. Unable to process incoming message. ${e}`)})}catch(t){console.error(t)}}}const K=new d,R=class R{constructor(e,t,s,a,i,W){r(this,"countSignedChangeRate",e=>{const t=e.filter(([,a])=>a.signed_change_rate>0).length,s=e.filter(([,a])=>a.signed_change_rate<0).length;return{greaterThanZeroCount:t,lessThanZeroCount:s}});r(this,"sortValuesBy",(e,t)=>e.filter(([,s])=>s!==void 0).sort((s,a)=>{const i=a[1][this.reqCall]-s[1][this.reqCall];return t==="asc"?i:-i}));r(this,"updateWsData",e=>{if(!e){console.warn("Received undefined data. Ignoring update.");return}try{const t=Object.fromEntries(this.keysToRetrieve.map(i=>[i,e.get(i)]));let s=this.sortValuesBy(Object.entries(t),this.typesort);const a=this.keysToRetrieve.length;this.rankea>=0&&a>0?s=Object.values(s).slice(this.startpos,this.startpos+this.rankea):this.rankea<0&&(s=Object.values(s).slice(this.rankea)),this.sortedWsData.value=Object.fromEntries(s),this.keysOnlyData.value=Object.keys(this.sortedWsData.value),this.valueOnlyData.value=Object.values(this.sortedWsData.value),this.rawdata.value=Object.values(this.sortedWsData.value)}catch(t){console.error("Error processing WebSocket data:",t)}});r(this,"setupWebSocket",e=>new Promise(t=>{this.isWebSocketSetup?t():K.setupWebSocket(e).then(()=>{this.isWebSocketSetup=!0,t()})}));this.keysToRetrieve=e,this.compname=t,this.reqCall=s,this.typesort=a,this.rankea=i,this.startpos=W,this.sortedWsData=o([]),this.isWebSocketSetup=!1,this.keysOnlyData=o([]),this.valueOnlyData=o([]),this.updateWsData=this.updateWsData.bind(this),this.rawdata=o(),K.registerUpdateFunction(this.updateWsData),R.isWebSocketInitialized||(this.setupWebSocket(s),R.isWebSocketInitialized=!0)}};r(R,"isWebSocketInitialized",!1);let c=R;const k=(n,e,t,s,a,i)=>{const W=new c(n,e,t,s,a,i);return{sortedWsData:W.sortedWsData,keysOnlyData:W.keysOnlyData,valueOnlyData:W.valueOnlyData,rawdata:W.rawdata,updateWsData:W.updateWsData}};export{S as r,k as u};
